/*
 * generated by Xtext
 */
grammar InternalElascript;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package emn.a1.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package emn.a1.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import emn.a1.services.ElascriptGrammarAccess;

}

@parser::members {
 
 	private ElascriptGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(ElascriptGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleScript
entryRuleScript 
:
{ before(grammarAccess.getScriptRule()); }
	 ruleScript
{ after(grammarAccess.getScriptRule()); } 
	 EOF 
;

// Rule Script
ruleScript
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getScriptAccess().getScriptStatementsAssignment()); }
(rule__Script__ScriptStatementsAssignment)*
{ after(grammarAccess.getScriptAccess().getScriptStatementsAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStatement
entryRuleStatement 
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStatementAccess().getAlternatives()); }
(rule__Statement__Alternatives)
{ after(grammarAccess.getStatementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParallel
entryRuleParallel 
:
{ before(grammarAccess.getParallelRule()); }
	 ruleParallel
{ after(grammarAccess.getParallelRule()); } 
	 EOF 
;

// Rule Parallel
ruleParallel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParallelAccess().getGroup()); }
(rule__Parallel__Group__0)
{ after(grammarAccess.getParallelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStatementList
entryRuleStatementList 
:
{ before(grammarAccess.getStatementListRule()); }
	 ruleStatementList
{ after(grammarAccess.getStatementListRule()); } 
	 EOF 
;

// Rule StatementList
ruleStatementList
    @init {
		int stackSize = keepStackSize();
    }
	:
(
(
{ before(grammarAccess.getStatementListAccess().getStatementsAssignment()); }
(rule__StatementList__StatementsAssignment)
{ after(grammarAccess.getStatementListAccess().getStatementsAssignment()); }
)
(
{ before(grammarAccess.getStatementListAccess().getStatementsAssignment()); }
(rule__StatementList__StatementsAssignment)*
{ after(grammarAccess.getStatementListAccess().getStatementsAssignment()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCommand
entryRuleCommand 
:
{ before(grammarAccess.getCommandRule()); }
	 ruleCommand
{ after(grammarAccess.getCommandRule()); } 
	 EOF 
;

// Rule Command
ruleCommand
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCommandAccess().getGroup()); }
(rule__Command__Group__0)
{ after(grammarAccess.getCommandAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunctionName
entryRuleFunctionName 
:
{ before(grammarAccess.getFunctionNameRule()); }
	 ruleFunctionName
{ after(grammarAccess.getFunctionNameRule()); } 
	 EOF 
;

// Rule FunctionName
ruleFunctionName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionNameAccess().getAlternatives()); }
(rule__FunctionName__Alternatives)
{ after(grammarAccess.getFunctionNameAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParam
entryRuleParam 
:
{ before(grammarAccess.getParamRule()); }
	 ruleParam
{ after(grammarAccess.getParamRule()); } 
	 EOF 
;

// Rule Param
ruleParam
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParamAccess().getValueAssignment()); }
(rule__Param__ValueAssignment)
{ after(grammarAccess.getParamAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleScale
entryRuleScale 
:
{ before(grammarAccess.getScaleRule()); }
	 ruleScale
{ after(grammarAccess.getScaleRule()); } 
	 EOF 
;

// Rule Scale
ruleScale
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getScaleAccess().getAlternatives()); }
(rule__Scale__Alternatives)
{ after(grammarAccess.getScaleAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleType
entryRuleType 
:
{ before(grammarAccess.getTypeRule()); }
	 ruleType
{ after(grammarAccess.getTypeRule()); } 
	 EOF 
;

// Rule Type
ruleType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeAccess().getAlternatives()); }
(rule__Type__Alternatives)
{ after(grammarAccess.getTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Statement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getCommandParserRuleCall_0()); }
	ruleCommand
{ after(grammarAccess.getStatementAccess().getCommandParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getParallelParserRuleCall_1()); }
	ruleParallel
{ after(grammarAccess.getStatementAccess().getParallelParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionName__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionNameAccess().getGroup_0()); }
(rule__FunctionName__Group_0__0)
{ after(grammarAccess.getFunctionNameAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getFunctionNameAccess().getIDTerminalRuleCall_1()); }
	RULE_ID
{ after(grammarAccess.getFunctionNameAccess().getIDTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Scale__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScaleAccess().getSCALE_INTerminalRuleCall_0()); }
	RULE_SCALE_IN
{ after(grammarAccess.getScaleAccess().getSCALE_INTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getScaleAccess().getSCALE_OUTTerminalRuleCall_1()); }
	RULE_SCALE_OUT
{ after(grammarAccess.getScaleAccess().getSCALE_OUTTerminalRuleCall_1()); }
)

    |(
{ before(grammarAccess.getScaleAccess().getSCALE_UPTerminalRuleCall_2()); }
	RULE_SCALE_UP
{ after(grammarAccess.getScaleAccess().getSCALE_UPTerminalRuleCall_2()); }
)

    |(
{ before(grammarAccess.getScaleAccess().getSCALE_DOWNTerminalRuleCall_3()); }
	RULE_SCALE_DOWN
{ after(grammarAccess.getScaleAccess().getSCALE_DOWNTerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getSOFTTerminalRuleCall_0()); }
	RULE_SOFT
{ after(grammarAccess.getTypeAccess().getSOFTTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getINFTerminalRuleCall_1()); }
	RULE_INF
{ after(grammarAccess.getTypeAccess().getINFTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Parallel__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parallel__Group__0__Impl
	rule__Parallel__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parallel__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParallelAccess().getSPLITTerminalRuleCall_0()); }
	RULE_SPLIT
{ after(grammarAccess.getParallelAccess().getSPLITTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parallel__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parallel__Group__1__Impl
	rule__Parallel__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Parallel__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParallelAccess().getStatementsAssignment_1()); }
(rule__Parallel__StatementsAssignment_1)
{ after(grammarAccess.getParallelAccess().getStatementsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parallel__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parallel__Group__2__Impl
	rule__Parallel__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Parallel__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getParallelAccess().getGroup_2()); }
(rule__Parallel__Group_2__0)
{ after(grammarAccess.getParallelAccess().getGroup_2()); }
)
(
{ before(grammarAccess.getParallelAccess().getGroup_2()); }
(rule__Parallel__Group_2__0)*
{ after(grammarAccess.getParallelAccess().getGroup_2()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parallel__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parallel__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parallel__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParallelAccess().getJOINTerminalRuleCall_3()); }
	RULE_JOIN
{ after(grammarAccess.getParallelAccess().getJOINTerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Parallel__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parallel__Group_2__0__Impl
	rule__Parallel__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parallel__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParallelAccess().getPARALLEL_SEPARATORTerminalRuleCall_2_0()); }
	RULE_PARALLEL_SEPARATOR
{ after(grammarAccess.getParallelAccess().getPARALLEL_SEPARATORTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parallel__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parallel__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parallel__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParallelAccess().getStatementsAssignment_2_1()); }
(rule__Parallel__StatementsAssignment_2_1)
{ after(grammarAccess.getParallelAccess().getStatementsAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Command__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Command__Group__0__Impl
	rule__Command__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommandAccess().getNameAssignment_0()); }
(rule__Command__NameAssignment_0)
{ after(grammarAccess.getCommandAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Command__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Command__Group__1__Impl
	rule__Command__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommandAccess().getLPTerminalRuleCall_1()); }
	RULE_LP
{ after(grammarAccess.getCommandAccess().getLPTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Command__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Command__Group__2__Impl
	rule__Command__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommandAccess().getParamsAssignment_2()); }
(rule__Command__ParamsAssignment_2)
{ after(grammarAccess.getCommandAccess().getParamsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Command__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Command__Group__3__Impl
	rule__Command__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommandAccess().getGroup_3()); }
(rule__Command__Group_3__0)*
{ after(grammarAccess.getCommandAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Command__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Command__Group__4__Impl
	rule__Command__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommandAccess().getRPTerminalRuleCall_4()); }
	RULE_RP
{ after(grammarAccess.getCommandAccess().getRPTerminalRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Command__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Command__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommandAccess().getSEQUENTIAL_SEPARATORTerminalRuleCall_5()); }
	RULE_SEQUENTIAL_SEPARATOR
{ after(grammarAccess.getCommandAccess().getSEQUENTIAL_SEPARATORTerminalRuleCall_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Command__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Command__Group_3__0__Impl
	rule__Command__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommandAccess().getCOMMATerminalRuleCall_3_0()); }
	RULE_COMMA
{ after(grammarAccess.getCommandAccess().getCOMMATerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Command__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Command__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommandAccess().getParamsAssignment_3_1()); }
(rule__Command__ParamsAssignment_3_1)
{ after(grammarAccess.getCommandAccess().getParamsAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionName__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionName__Group_0__0__Impl
	rule__FunctionName__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionName__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionNameAccess().getScaleParserRuleCall_0_0()); }
	ruleScale
{ after(grammarAccess.getFunctionNameAccess().getScaleParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionName__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionName__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionName__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionNameAccess().getTypeParserRuleCall_0_1()); }
	ruleType
{ after(grammarAccess.getFunctionNameAccess().getTypeParserRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Script__ScriptStatementsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScriptAccess().getScriptStatementsStatementParserRuleCall_0()); }
	ruleStatement{ after(grammarAccess.getScriptAccess().getScriptStatementsStatementParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Parallel__StatementsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParallelAccess().getStatementsStatementListParserRuleCall_1_0()); }
	ruleStatementList{ after(grammarAccess.getParallelAccess().getStatementsStatementListParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Parallel__StatementsAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParallelAccess().getStatementsStatementListParserRuleCall_2_1_0()); }
	ruleStatementList{ after(grammarAccess.getParallelAccess().getStatementsStatementListParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StatementList__StatementsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementListAccess().getStatementsStatementParserRuleCall_0()); }
	ruleStatement{ after(grammarAccess.getStatementListAccess().getStatementsStatementParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Command__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommandAccess().getNameFunctionNameParserRuleCall_0_0()); }
	ruleFunctionName{ after(grammarAccess.getCommandAccess().getNameFunctionNameParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Command__ParamsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommandAccess().getParamsParamParserRuleCall_2_0()); }
	ruleParam{ after(grammarAccess.getCommandAccess().getParamsParamParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Command__ParamsAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommandAccess().getParamsParamParserRuleCall_3_1_0()); }
	ruleParam{ after(grammarAccess.getCommandAccess().getParamsParamParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Param__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParamAccess().getValueINTTerminalRuleCall_0()); }
	RULE_INT{ after(grammarAccess.getParamAccess().getValueINTTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_SCALE_IN : 'ScaleIn';

RULE_SCALE_OUT : 'ScaleOut';

RULE_SCALE_UP : 'ScaleUp';

RULE_SCALE_DOWN : 'ScaleDown';

RULE_SOFT : 'Soft';

RULE_INF : 'Inf';

RULE_PARALLEL_SEPARATOR : '||';

RULE_LP : '(';

RULE_RP : ')';

fragment RULE_LETTER : ('$'|'A'..'Z'|'a'..'z'|'_');

fragment RULE_NUMBER : '0'..'9';

RULE_SEQUENTIAL_SEPARATOR : ';';

RULE_COMMA : ',';

RULE_SPLIT : '[';

RULE_JOIN : ']';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


