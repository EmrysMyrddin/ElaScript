/*
 * generated by Xtext
 */
package org.elascript.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ElascriptGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ScriptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Script");
		private final Assignment cActionsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cActionsActionParserRuleCall_0 = (RuleCall)cActionsAssignment.eContents().get(0);
		
		//Script:
		//	actions+=Action*;
		@Override public ParserRule getRule() { return rule; }

		//actions+=Action*
		public Assignment getActionsAssignment() { return cActionsAssignment; }

		//Action
		public RuleCall getActionsActionParserRuleCall_0() { return cActionsActionParserRuleCall_0; }
	}

	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Action");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCommandParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cParallelParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Action:
		//	Command | Parallel;
		@Override public ParserRule getRule() { return rule; }

		//Command | Parallel
		public Alternatives getAlternatives() { return cAlternatives; }

		//Command
		public RuleCall getCommandParserRuleCall_0() { return cCommandParserRuleCall_0; }

		//Parallel
		public RuleCall getParallelParserRuleCall_1() { return cParallelParserRuleCall_1; }
	}

	public class ParallelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parallel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSPLITTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cParallelBodyParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameJOINTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Parallel:
		//	SPLIT ParallelBody name=JOIN;
		@Override public ParserRule getRule() { return rule; }

		//SPLIT ParallelBody name=JOIN
		public Group getGroup() { return cGroup; }

		//SPLIT
		public RuleCall getSPLITTerminalRuleCall_0() { return cSPLITTerminalRuleCall_0; }

		//ParallelBody
		public RuleCall getParallelBodyParserRuleCall_1() { return cParallelBodyParserRuleCall_1; }

		//name=JOIN
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//JOIN
		public RuleCall getNameJOINTerminalRuleCall_2_0() { return cNameJOINTerminalRuleCall_2_0; }
	}

	public class ParallelBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParallelBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cActionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cActionsActionListParserRuleCall_0_0 = (RuleCall)cActionsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cPARALLEL_SEPARATORTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cActionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cActionsActionListParserRuleCall_1_1_0 = (RuleCall)cActionsAssignment_1_1.eContents().get(0);
		
		//ParallelBody:
		//	actions+=ActionList (PARALLEL_SEPARATOR actions+=ActionList)+;
		@Override public ParserRule getRule() { return rule; }

		//actions+=ActionList (PARALLEL_SEPARATOR actions+=ActionList)+
		public Group getGroup() { return cGroup; }

		//actions+=ActionList
		public Assignment getActionsAssignment_0() { return cActionsAssignment_0; }

		//ActionList
		public RuleCall getActionsActionListParserRuleCall_0_0() { return cActionsActionListParserRuleCall_0_0; }

		//(PARALLEL_SEPARATOR actions+=ActionList)+
		public Group getGroup_1() { return cGroup_1; }

		//PARALLEL_SEPARATOR
		public RuleCall getPARALLEL_SEPARATORTerminalRuleCall_1_0() { return cPARALLEL_SEPARATORTerminalRuleCall_1_0; }

		//actions+=ActionList
		public Assignment getActionsAssignment_1_1() { return cActionsAssignment_1_1; }

		//ActionList
		public RuleCall getActionsActionListParserRuleCall_1_1_0() { return cActionsActionListParserRuleCall_1_1_0; }
	}

	public class ActionListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ActionList");
		private final Assignment cActionsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cActionsActionParserRuleCall_0 = (RuleCall)cActionsAssignment.eContents().get(0);
		
		//ActionList:
		//	actions+=Action+;
		@Override public ParserRule getRule() { return rule; }

		//actions+=Action+
		public Assignment getActionsAssignment() { return cActionsAssignment; }

		//Action
		public RuleCall getActionsActionParserRuleCall_0() { return cActionsActionParserRuleCall_0; }
	}

	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Command");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameFUNCTION_NAMETerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final RuleCall cLPTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cParamsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParamsParamListParserRuleCall_2_0 = (RuleCall)cParamsAssignment_2.eContents().get(0);
		private final RuleCall cRPTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cSEQUENTIAL_SEPARATORTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//Command:
		//	name=FUNCTION_NAME LP params=ParamList RP SEQUENTIAL_SEPARATOR;
		@Override public ParserRule getRule() { return rule; }

		//name=FUNCTION_NAME LP params=ParamList RP SEQUENTIAL_SEPARATOR
		public Group getGroup() { return cGroup; }

		//name=FUNCTION_NAME
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//FUNCTION_NAME
		public RuleCall getNameFUNCTION_NAMETerminalRuleCall_0_0() { return cNameFUNCTION_NAMETerminalRuleCall_0_0; }

		//LP
		public RuleCall getLPTerminalRuleCall_1() { return cLPTerminalRuleCall_1; }

		//params=ParamList
		public Assignment getParamsAssignment_2() { return cParamsAssignment_2; }

		//ParamList
		public RuleCall getParamsParamListParserRuleCall_2_0() { return cParamsParamListParserRuleCall_2_0; }

		//RP
		public RuleCall getRPTerminalRuleCall_3() { return cRPTerminalRuleCall_3; }

		//SEQUENTIAL_SEPARATOR
		public RuleCall getSEQUENTIAL_SEPARATORTerminalRuleCall_4() { return cSEQUENTIAL_SEPARATORTerminalRuleCall_4; }
	}

	public class ParamListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParamList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParamsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParamsPARAMParserRuleCall_0_0 = (RuleCall)cParamsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cCOMMATerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cParamsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParamsPARAMParserRuleCall_1_1_0 = (RuleCall)cParamsAssignment_1_1.eContents().get(0);
		
		//ParamList:
		//	params+=PARAM (COMMA params+=PARAM)*;
		@Override public ParserRule getRule() { return rule; }

		//params+=PARAM (COMMA params+=PARAM)*
		public Group getGroup() { return cGroup; }

		//params+=PARAM
		public Assignment getParamsAssignment_0() { return cParamsAssignment_0; }

		//PARAM
		public RuleCall getParamsPARAMParserRuleCall_0_0() { return cParamsPARAMParserRuleCall_0_0; }

		//(COMMA params+=PARAM)*
		public Group getGroup_1() { return cGroup_1; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_1_0() { return cCOMMATerminalRuleCall_1_0; }

		//params+=PARAM
		public Assignment getParamsAssignment_1_1() { return cParamsAssignment_1_1; }

		//PARAM
		public RuleCall getParamsPARAMParserRuleCall_1_1_0() { return cParamsPARAMParserRuleCall_1_1_0; }
	}

	public class PARAMElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PARAM");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//PARAM:
		//	INT;
		@Override public ParserRule getRule() { return rule; }

		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}
	
	
	private final ScriptElements pScript;
	private final ActionElements pAction;
	private final ParallelElements pParallel;
	private final ParallelBodyElements pParallelBody;
	private final ActionListElements pActionList;
	private final CommandElements pCommand;
	private final TerminalRule tFUNCTION_NAME;
	private final ParamListElements pParamList;
	private final PARAMElements pPARAM;
	private final TerminalRule tLP;
	private final TerminalRule tRP;
	private final TerminalRule tLETTER;
	private final TerminalRule tNUMBER;
	private final TerminalRule tSEQUENTIAL_SEPARATOR;
	private final TerminalRule tPARALLEL_SEPARATOR;
	private final TerminalRule tCOMMA;
	private final TerminalRule tSPLIT;
	private final TerminalRule tJOIN;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ElascriptGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pScript = new ScriptElements();
		this.pAction = new ActionElements();
		this.pParallel = new ParallelElements();
		this.pParallelBody = new ParallelBodyElements();
		this.pActionList = new ActionListElements();
		this.pCommand = new CommandElements();
		this.tFUNCTION_NAME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FUNCTION_NAME");
		this.pParamList = new ParamListElements();
		this.pPARAM = new PARAMElements();
		this.tLP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LP");
		this.tRP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RP");
		this.tLETTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LETTER");
		this.tNUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NUMBER");
		this.tSEQUENTIAL_SEPARATOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SEQUENTIAL_SEPARATOR");
		this.tPARALLEL_SEPARATOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PARALLEL_SEPARATOR");
		this.tCOMMA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "COMMA");
		this.tSPLIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SPLIT");
		this.tJOIN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "JOIN");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.elascript.Elascript".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Script:
	//	actions+=Action*;
	public ScriptElements getScriptAccess() {
		return pScript;
	}
	
	public ParserRule getScriptRule() {
		return getScriptAccess().getRule();
	}

	//Action:
	//	Command | Parallel;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}

	//Parallel:
	//	SPLIT ParallelBody name=JOIN;
	public ParallelElements getParallelAccess() {
		return pParallel;
	}
	
	public ParserRule getParallelRule() {
		return getParallelAccess().getRule();
	}

	//ParallelBody:
	//	actions+=ActionList (PARALLEL_SEPARATOR actions+=ActionList)+;
	public ParallelBodyElements getParallelBodyAccess() {
		return pParallelBody;
	}
	
	public ParserRule getParallelBodyRule() {
		return getParallelBodyAccess().getRule();
	}

	//ActionList:
	//	actions+=Action+;
	public ActionListElements getActionListAccess() {
		return pActionList;
	}
	
	public ParserRule getActionListRule() {
		return getActionListAccess().getRule();
	}

	//Command:
	//	name=FUNCTION_NAME LP params=ParamList RP SEQUENTIAL_SEPARATOR;
	public CommandElements getCommandAccess() {
		return pCommand;
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}

	//terminal FUNCTION_NAME:
	//	LETTER (LETTER | NUMBER)*;
	public TerminalRule getFUNCTION_NAMERule() {
		return tFUNCTION_NAME;
	} 

	//ParamList:
	//	params+=PARAM (COMMA params+=PARAM)*;
	public ParamListElements getParamListAccess() {
		return pParamList;
	}
	
	public ParserRule getParamListRule() {
		return getParamListAccess().getRule();
	}

	//PARAM:
	//	INT;
	public PARAMElements getPARAMAccess() {
		return pPARAM;
	}
	
	public ParserRule getPARAMRule() {
		return getPARAMAccess().getRule();
	}

	////Lexemsr
	//terminal LP:
	//	"(";
	public TerminalRule getLPRule() {
		return tLP;
	} 

	//terminal RP:
	//	")";
	public TerminalRule getRPRule() {
		return tRP;
	} 

	//terminal fragment LETTER:
	//	"$" | "A".."Z" | "a".."z" | "_";
	public TerminalRule getLETTERRule() {
		return tLETTER;
	} 

	//terminal fragment NUMBER:
	//	"0".."9";
	public TerminalRule getNUMBERRule() {
		return tNUMBER;
	} 

	//terminal SEQUENTIAL_SEPARATOR:
	//	";";
	public TerminalRule getSEQUENTIAL_SEPARATORRule() {
		return tSEQUENTIAL_SEPARATOR;
	} 

	//terminal PARALLEL_SEPARATOR:
	//	"||";
	public TerminalRule getPARALLEL_SEPARATORRule() {
		return tPARALLEL_SEPARATOR;
	} 

	//terminal COMMA:
	//	",";
	public TerminalRule getCOMMARule() {
		return tCOMMA;
	} 

	//terminal SPLIT:
	//	"[";
	public TerminalRule getSPLITRule() {
		return tSPLIT;
	} 

	//terminal JOIN:
	//	"]";
	public TerminalRule getJOINRule() {
		return tJOIN;
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
