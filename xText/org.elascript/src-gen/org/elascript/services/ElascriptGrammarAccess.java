/*
 * generated by Xtext
 */
package org.elascript.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ElascriptGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ScriptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Script");
		private final Assignment cScriptStatementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cScriptStatementsStatementParserRuleCall_0 = (RuleCall)cScriptStatementsAssignment.eContents().get(0);
		
		//Script:
		//	scriptStatements+=Statement*;
		@Override public ParserRule getRule() { return rule; }

		//scriptStatements+=Statement*
		public Assignment getScriptStatementsAssignment() { return cScriptStatementsAssignment; }

		//Statement
		public RuleCall getScriptStatementsStatementParserRuleCall_0() { return cScriptStatementsStatementParserRuleCall_0; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCommandParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cParallelParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Statement:
		//	Command | Parallel;
		@Override public ParserRule getRule() { return rule; }

		//Command | Parallel
		public Alternatives getAlternatives() { return cAlternatives; }

		//Command
		public RuleCall getCommandParserRuleCall_0() { return cCommandParserRuleCall_0; }

		//Parallel
		public RuleCall getParallelParserRuleCall_1() { return cParallelParserRuleCall_1; }
	}

	public class ParallelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parallel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSPLITTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cParallelBodyParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameJOINTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Parallel:
		//	SPLIT ParallelBody name=JOIN;
		@Override public ParserRule getRule() { return rule; }

		//SPLIT ParallelBody name=JOIN
		public Group getGroup() { return cGroup; }

		//SPLIT
		public RuleCall getSPLITTerminalRuleCall_0() { return cSPLITTerminalRuleCall_0; }

		//ParallelBody
		public RuleCall getParallelBodyParserRuleCall_1() { return cParallelBodyParserRuleCall_1; }

		//name=JOIN
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//JOIN
		public RuleCall getNameJOINTerminalRuleCall_2_0() { return cNameJOINTerminalRuleCall_2_0; }
	}

	public class ParallelBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParallelBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStatementsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStatementsStatementListParserRuleCall_0_0 = (RuleCall)cStatementsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cPARALLEL_SEPARATORTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cStatementsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cStatementsStatementListParserRuleCall_1_1_0 = (RuleCall)cStatementsAssignment_1_1.eContents().get(0);
		
		//ParallelBody:
		//	statements+=StatementList (PARALLEL_SEPARATOR statements+=StatementList)+;
		@Override public ParserRule getRule() { return rule; }

		//statements+=StatementList (PARALLEL_SEPARATOR statements+=StatementList)+
		public Group getGroup() { return cGroup; }

		//statements+=StatementList
		public Assignment getStatementsAssignment_0() { return cStatementsAssignment_0; }

		//StatementList
		public RuleCall getStatementsStatementListParserRuleCall_0_0() { return cStatementsStatementListParserRuleCall_0_0; }

		//(PARALLEL_SEPARATOR statements+=StatementList)+
		public Group getGroup_1() { return cGroup_1; }

		//PARALLEL_SEPARATOR
		public RuleCall getPARALLEL_SEPARATORTerminalRuleCall_1_0() { return cPARALLEL_SEPARATORTerminalRuleCall_1_0; }

		//statements+=StatementList
		public Assignment getStatementsAssignment_1_1() { return cStatementsAssignment_1_1; }

		//StatementList
		public RuleCall getStatementsStatementListParserRuleCall_1_1_0() { return cStatementsStatementListParserRuleCall_1_1_0; }
	}

	public class StatementListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StatementList");
		private final Assignment cStatementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_0 = (RuleCall)cStatementsAssignment.eContents().get(0);
		
		//StatementList returns EList:
		//	statements+=Statement+;
		@Override public ParserRule getRule() { return rule; }

		//statements+=Statement+
		public Assignment getStatementsAssignment() { return cStatementsAssignment; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_0() { return cStatementsStatementParserRuleCall_0; }
	}

	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Command");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameFUNCTION_NAMETerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final RuleCall cLPTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cParamsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParamsParamParserRuleCall_2_0 = (RuleCall)cParamsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cCOMMATerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Assignment cParamsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cParamsParamParserRuleCall_3_1_0 = (RuleCall)cParamsAssignment_3_1.eContents().get(0);
		private final RuleCall cRPTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cSEQUENTIAL_SEPARATORTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//Command:
		//	name=FUNCTION_NAME LP params+=Param (COMMA params+=Param)* RP SEQUENTIAL_SEPARATOR;
		@Override public ParserRule getRule() { return rule; }

		//name=FUNCTION_NAME LP params+=Param (COMMA params+=Param)* RP SEQUENTIAL_SEPARATOR
		public Group getGroup() { return cGroup; }

		//name=FUNCTION_NAME
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//FUNCTION_NAME
		public RuleCall getNameFUNCTION_NAMETerminalRuleCall_0_0() { return cNameFUNCTION_NAMETerminalRuleCall_0_0; }

		//LP
		public RuleCall getLPTerminalRuleCall_1() { return cLPTerminalRuleCall_1; }

		//params+=Param
		public Assignment getParamsAssignment_2() { return cParamsAssignment_2; }

		//Param
		public RuleCall getParamsParamParserRuleCall_2_0() { return cParamsParamParserRuleCall_2_0; }

		//(COMMA params+=Param)*
		public Group getGroup_3() { return cGroup_3; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_3_0() { return cCOMMATerminalRuleCall_3_0; }

		//params+=Param
		public Assignment getParamsAssignment_3_1() { return cParamsAssignment_3_1; }

		//Param
		public RuleCall getParamsParamParserRuleCall_3_1_0() { return cParamsParamParserRuleCall_3_1_0; }

		//RP
		public RuleCall getRPTerminalRuleCall_4() { return cRPTerminalRuleCall_4; }

		//SEQUENTIAL_SEPARATOR
		public RuleCall getSEQUENTIAL_SEPARATORTerminalRuleCall_5() { return cSEQUENTIAL_SEPARATORTerminalRuleCall_5; }
	}

	public class ParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Param");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//Param:
		//	value=INT;
		@Override public ParserRule getRule() { return rule; }

		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}
	
	
	private final ScriptElements pScript;
	private final StatementElements pStatement;
	private final ParallelElements pParallel;
	private final ParallelBodyElements pParallelBody;
	private final StatementListElements pStatementList;
	private final CommandElements pCommand;
	private final TerminalRule tFUNCTION_NAME;
	private final ParamElements pParam;
	private final TerminalRule tPARALLEL_SEPARATOR;
	private final TerminalRule tLP;
	private final TerminalRule tRP;
	private final TerminalRule tLETTER;
	private final TerminalRule tNUMBER;
	private final TerminalRule tSEQUENTIAL_SEPARATOR;
	private final TerminalRule tCOMMA;
	private final TerminalRule tSPLIT;
	private final TerminalRule tJOIN;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ElascriptGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pScript = new ScriptElements();
		this.pStatement = new StatementElements();
		this.pParallel = new ParallelElements();
		this.pParallelBody = new ParallelBodyElements();
		this.pStatementList = new StatementListElements();
		this.pCommand = new CommandElements();
		this.tFUNCTION_NAME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FUNCTION_NAME");
		this.pParam = new ParamElements();
		this.tPARALLEL_SEPARATOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PARALLEL_SEPARATOR");
		this.tLP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LP");
		this.tRP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RP");
		this.tLETTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LETTER");
		this.tNUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NUMBER");
		this.tSEQUENTIAL_SEPARATOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SEQUENTIAL_SEPARATOR");
		this.tCOMMA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "COMMA");
		this.tSPLIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SPLIT");
		this.tJOIN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "JOIN");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.elascript.Elascript".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Script:
	//	scriptStatements+=Statement*;
	public ScriptElements getScriptAccess() {
		return pScript;
	}
	
	public ParserRule getScriptRule() {
		return getScriptAccess().getRule();
	}

	//Statement:
	//	Command | Parallel;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//Parallel:
	//	SPLIT ParallelBody name=JOIN;
	public ParallelElements getParallelAccess() {
		return pParallel;
	}
	
	public ParserRule getParallelRule() {
		return getParallelAccess().getRule();
	}

	//ParallelBody:
	//	statements+=StatementList (PARALLEL_SEPARATOR statements+=StatementList)+;
	public ParallelBodyElements getParallelBodyAccess() {
		return pParallelBody;
	}
	
	public ParserRule getParallelBodyRule() {
		return getParallelBodyAccess().getRule();
	}

	//StatementList returns EList:
	//	statements+=Statement+;
	public StatementListElements getStatementListAccess() {
		return pStatementList;
	}
	
	public ParserRule getStatementListRule() {
		return getStatementListAccess().getRule();
	}

	//Command:
	//	name=FUNCTION_NAME LP params+=Param (COMMA params+=Param)* RP SEQUENTIAL_SEPARATOR;
	public CommandElements getCommandAccess() {
		return pCommand;
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}

	//terminal FUNCTION_NAME:
	//	LETTER (LETTER | NUMBER)*;
	public TerminalRule getFUNCTION_NAMERule() {
		return tFUNCTION_NAME;
	} 

	//Param:
	//	value=INT;
	public ParamElements getParamAccess() {
		return pParam;
	}
	
	public ParserRule getParamRule() {
		return getParamAccess().getRule();
	}

	//terminal PARALLEL_SEPARATOR:
	//	"||";
	public TerminalRule getPARALLEL_SEPARATORRule() {
		return tPARALLEL_SEPARATOR;
	} 

	////Lexems
	//terminal LP:
	//	"(";
	public TerminalRule getLPRule() {
		return tLP;
	} 

	//terminal RP:
	//	")";
	public TerminalRule getRPRule() {
		return tRP;
	} 

	//terminal fragment LETTER:
	//	"$" | "A".."Z" | "a".."z" | "_";
	public TerminalRule getLETTERRule() {
		return tLETTER;
	} 

	//terminal fragment NUMBER:
	//	"0".."9";
	public TerminalRule getNUMBERRule() {
		return tNUMBER;
	} 

	//terminal SEQUENTIAL_SEPARATOR:
	//	";";
	public TerminalRule getSEQUENTIAL_SEPARATORRule() {
		return tSEQUENTIAL_SEPARATOR;
	} 

	//terminal COMMA:
	//	",";
	public TerminalRule getCOMMARule() {
		return tCOMMA;
	} 

	//terminal SPLIT:
	//	"[";
	public TerminalRule getSPLITRule() {
		return tSPLIT;
	} 

	//terminal JOIN:
	//	"]";
	public TerminalRule getJOINRule() {
		return tJOIN;
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
