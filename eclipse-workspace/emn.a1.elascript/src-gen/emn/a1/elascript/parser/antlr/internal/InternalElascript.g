/*
 * generated by Xtext
 */
grammar InternalElascript;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package emn.a1.elascript.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package emn.a1.elascript.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import emn.a1.elascript.services.ElascriptGrammarAccess;

}

@parser::members {

 	private ElascriptGrammarAccess grammarAccess;
 	
    public InternalElascriptParser(TokenStream input, ElascriptGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Script";	
   	}
   	
   	@Override
   	protected ElascriptGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleScript
entryRuleScript returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getScriptRule()); }
	 iv_ruleScript=ruleScript 
	 { $current=$iv_ruleScript.current; } 
	 EOF 
;

// Rule Script
ruleScript returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getScriptAccess().getScriptStatementsStatementParserRuleCall_0()); 
	    }
		lv_scriptStatements_0_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getScriptRule());
	        }
       		add(
       			$current, 
       			"scriptStatements",
        		lv_scriptStatements_0_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	 iv_ruleStatement=ruleStatement 
	 { $current=$iv_ruleStatement.current; } 
	 EOF 
;

// Rule Statement
ruleStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getCommandParserRuleCall_0()); 
    }
    this_Command_0=ruleCommand
    { 
        $current = $this_Command_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getParallelParserRuleCall_1()); 
    }
    this_Parallel_1=ruleParallel
    { 
        $current = $this_Parallel_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleParallel
entryRuleParallel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParallelRule()); }
	 iv_ruleParallel=ruleParallel 
	 { $current=$iv_ruleParallel.current; } 
	 EOF 
;

// Rule Parallel
ruleParallel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_SPLIT_0=RULE_SPLIT
    { 
    newLeafNode(this_SPLIT_0, grammarAccess.getParallelAccess().getSPLITTerminalRuleCall_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParallelAccess().getStatementsStatementListParserRuleCall_1_0()); 
	    }
		lv_statements_1_0=ruleStatementList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParallelRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_1_0, 
        		"StatementList");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_PARALLEL_SEPARATOR_2=RULE_PARALLEL_SEPARATOR
    { 
    newLeafNode(this_PARALLEL_SEPARATOR_2, grammarAccess.getParallelAccess().getPARALLEL_SEPARATORTerminalRuleCall_2_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParallelAccess().getStatementsStatementListParserRuleCall_2_1_0()); 
	    }
		lv_statements_3_0=ruleStatementList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParallelRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_3_0, 
        		"StatementList");
	        afterParserOrEnumRuleCall();
	    }

)
))+this_JOIN_4=RULE_JOIN
    { 
    newLeafNode(this_JOIN_4, grammarAccess.getParallelAccess().getJOINTerminalRuleCall_3()); 
    }
)
;





// Entry rule entryRuleStatementList
entryRuleStatementList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementListRule()); }
	 iv_ruleStatementList=ruleStatementList 
	 { $current=$iv_ruleStatementList.current; } 
	 EOF 
;

// Rule StatementList
ruleStatementList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementListAccess().getStatementsStatementParserRuleCall_0()); 
	    }
		lv_statements_0_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementListRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_0_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)+
;





// Entry rule entryRuleCommand
entryRuleCommand returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCommandRule()); }
	 iv_ruleCommand=ruleCommand 
	 { $current=$iv_ruleCommand.current; } 
	 EOF 
;

// Rule Command
ruleCommand returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getCommandAccess().getNameFunctionNameParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleFunctionName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCommandRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"FunctionName");
	        afterParserOrEnumRuleCall();
	    }

)
)this_LP_1=RULE_LP
    { 
    newLeafNode(this_LP_1, grammarAccess.getCommandAccess().getLPTerminalRuleCall_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCommandAccess().getParamsParamParserRuleCall_2_0()); 
	    }
		lv_params_2_0=ruleParam		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCommandRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_2_0, 
        		"Param");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_COMMA_3=RULE_COMMA
    { 
    newLeafNode(this_COMMA_3, grammarAccess.getCommandAccess().getCOMMATerminalRuleCall_3_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCommandAccess().getParamsParamParserRuleCall_3_1_0()); 
	    }
		lv_params_4_0=ruleParam		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCommandRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_4_0, 
        		"Param");
	        afterParserOrEnumRuleCall();
	    }

)
))*this_RP_5=RULE_RP
    { 
    newLeafNode(this_RP_5, grammarAccess.getCommandAccess().getRPTerminalRuleCall_4()); 
    }
this_SEQUENTIAL_SEPARATOR_6=RULE_SEQUENTIAL_SEPARATOR
    { 
    newLeafNode(this_SEQUENTIAL_SEPARATOR_6, grammarAccess.getCommandAccess().getSEQUENTIAL_SEPARATORTerminalRuleCall_5()); 
    }
)
;





// Entry rule entryRuleFunctionName
entryRuleFunctionName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionNameRule()); } 
	 iv_ruleFunctionName=ruleFunctionName 
	 { $current=$iv_ruleFunctionName.current.getText(); }  
	 EOF 
;

// Rule FunctionName
ruleFunctionName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getFunctionNameAccess().getScaleParserRuleCall_0_0()); 
    }
    this_Scale_0=ruleScale    {
		$current.merge(this_Scale_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getFunctionNameAccess().getTypeParserRuleCall_0_1()); 
    }
    this_Type_1=ruleType    {
		$current.merge(this_Type_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getFunctionNameAccess().getIDTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleParam
entryRuleParam returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParamRule()); }
	 iv_ruleParam=ruleParam 
	 { $current=$iv_ruleParam.current; } 
	 EOF 
;

// Rule Param
ruleParam returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_INT
		{
			newLeafNode(lv_value_0_0, grammarAccess.getParamAccess().getValueINTTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParamRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"INT");
	    }

)
)
;





// Entry rule entryRuleScale
entryRuleScale returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getScaleRule()); } 
	 iv_ruleScale=ruleScale 
	 { $current=$iv_ruleScale.current.getText(); }  
	 EOF 
;

// Rule Scale
ruleScale returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_SCALE_IN_0=RULE_SCALE_IN    {
		$current.merge(this_SCALE_IN_0);
    }

    { 
    newLeafNode(this_SCALE_IN_0, grammarAccess.getScaleAccess().getSCALE_INTerminalRuleCall_0()); 
    }

    |    this_SCALE_OUT_1=RULE_SCALE_OUT    {
		$current.merge(this_SCALE_OUT_1);
    }

    { 
    newLeafNode(this_SCALE_OUT_1, grammarAccess.getScaleAccess().getSCALE_OUTTerminalRuleCall_1()); 
    }

    |    this_SCALE_UP_2=RULE_SCALE_UP    {
		$current.merge(this_SCALE_UP_2);
    }

    { 
    newLeafNode(this_SCALE_UP_2, grammarAccess.getScaleAccess().getSCALE_UPTerminalRuleCall_2()); 
    }

    |    this_SCALE_DOWN_3=RULE_SCALE_DOWN    {
		$current.merge(this_SCALE_DOWN_3);
    }

    { 
    newLeafNode(this_SCALE_DOWN_3, grammarAccess.getScaleAccess().getSCALE_DOWNTerminalRuleCall_3()); 
    }
)
    ;





// Entry rule entryRuleType
entryRuleType returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeRule()); } 
	 iv_ruleType=ruleType 
	 { $current=$iv_ruleType.current.getText(); }  
	 EOF 
;

// Rule Type
ruleType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_SOFT_0=RULE_SOFT    {
		$current.merge(this_SOFT_0);
    }

    { 
    newLeafNode(this_SOFT_0, grammarAccess.getTypeAccess().getSOFTTerminalRuleCall_0()); 
    }

    |    this_INF_1=RULE_INF    {
		$current.merge(this_INF_1);
    }

    { 
    newLeafNode(this_INF_1, grammarAccess.getTypeAccess().getINFTerminalRuleCall_1()); 
    }
)
    ;





RULE_SCALE_IN : 'ScaleIn';

RULE_SCALE_OUT : 'ScaleOut';

RULE_SCALE_UP : 'ScaleUp';

RULE_SCALE_DOWN : 'ScaleDown';

RULE_SOFT : 'Soft';

RULE_INF : 'Inf';

RULE_PARALLEL_SEPARATOR : '||';

RULE_LP : '(';

RULE_RP : ')';

fragment RULE_LETTER : ('$'|'A'..'Z'|'a'..'z'|'_');

fragment RULE_NUMBER : '0'..'9';

RULE_SEQUENTIAL_SEPARATOR : ';';

RULE_COMMA : ',';

RULE_SPLIT : '[';

RULE_JOIN : ']';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


