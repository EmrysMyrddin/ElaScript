/*
 * generated by Xtext
 */
package org.elascript.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticNodeProvider.INodesForEObjectProvider;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.elascript.elascript.ActionList;
import org.elascript.elascript.Command;
import org.elascript.elascript.ElascriptPackage;
import org.elascript.elascript.ParallelBody;
import org.elascript.elascript.ParamList;
import org.elascript.elascript.Script;
import org.elascript.services.ElascriptGrammarAccess;

@SuppressWarnings("all")
public class ElascriptSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ElascriptGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == ElascriptPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case ElascriptPackage.ACTION_LIST:
				sequence_ActionList(context, (ActionList) semanticObject); 
				return; 
			case ElascriptPackage.COMMAND:
				sequence_Command(context, (Command) semanticObject); 
				return; 
			case ElascriptPackage.PARALLEL_BODY:
				if(context == grammarAccess.getParallelBodyRule()) {
					sequence_ParallelBody(context, (ParallelBody) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getActionRule() ||
				   context == grammarAccess.getParallelRule()) {
					sequence_Parallel_ParallelBody(context, (ParallelBody) semanticObject); 
					return; 
				}
				else break;
			case ElascriptPackage.PARAM_LIST:
				sequence_ParamList(context, (ParamList) semanticObject); 
				return; 
			case ElascriptPackage.SCRIPT:
				sequence_Script(context, (Script) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     actions+=Action+
	 */
	protected void sequence_ActionList(EObject context, ActionList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=FUNCTION_NAME params=ParamList)
	 */
	protected void sequence_Command(EObject context, Command semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, ElascriptPackage.Literals.COMMAND__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ElascriptPackage.Literals.COMMAND__NAME));
			if(transientValues.isValueTransient(semanticObject, ElascriptPackage.Literals.COMMAND__PARAMS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ElascriptPackage.Literals.COMMAND__PARAMS));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getCommandAccess().getNameFUNCTION_NAMETerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getCommandAccess().getParamsParamListParserRuleCall_2_0(), semanticObject.getParams());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (actions+=ActionList actions+=ActionList+)
	 */
	protected void sequence_ParallelBody(EObject context, ParallelBody semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (actions+=ActionList actions+=ActionList+ name=JOIN)
	 */
	protected void sequence_Parallel_ParallelBody(EObject context, ParallelBody semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (params+=PARAM params+=PARAM*)
	 */
	protected void sequence_ParamList(EObject context, ParamList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     actions+=Action*
	 */
	protected void sequence_Script(EObject context, Script semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
}
