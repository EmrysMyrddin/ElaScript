/*
* generated by Xtext
*/
grammar InternalElascript;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package emn.a1.elascript.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package emn.a1.elascript.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import emn.a1.elascript.services.ElascriptGrammarAccess;

}

@parser::members {

 	private ElascriptGrammarAccess grammarAccess;
 	
    public InternalElascriptParser(TokenStream input, ElascriptGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Script";	
   	}
   	
   	@Override
   	protected ElascriptGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleScript
entryRuleScript returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getScriptRule()); }
	 iv_ruleScript=ruleScript 
	 { $current=$iv_ruleScript.current; } 
	 EOF 
;

// Rule Script
ruleScript returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getScriptAccess().getBeginScriptBeginScriptParserRuleCall_0_0()); 
	    }
		lv_BeginScript_0_0=ruleBeginScript		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getScriptRule());
	        }
       		set(
       			$current, 
       			"BeginScript",
        		lv_BeginScript_0_0, 
        		"BeginScript");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getScriptAccess().getScriptStatementStatementListParserRuleCall_1_0()); 
	    }
		lv_scriptStatement_1_0=ruleStatementList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getScriptRule());
	        }
       		set(
       			$current, 
       			"scriptStatement",
        		lv_scriptStatement_1_0, 
        		"StatementList");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getScriptAccess().getEndScriptEndScriptParserRuleCall_2_0()); 
	    }
		lv_EndScript_2_0=ruleEndScript		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getScriptRule());
	        }
       		set(
       			$current, 
       			"EndScript",
        		lv_EndScript_2_0, 
        		"EndScript");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleBeginScript
entryRuleBeginScript returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBeginScriptRule()); }
	 iv_ruleBeginScript=ruleBeginScript 
	 { $current=$iv_ruleBeginScript.current; } 
	 EOF 
;

// Rule BeginScript
ruleBeginScript returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=	'begin' 
    {
        newLeafNode(lv_name_0_0, grammarAccess.getBeginScriptAccess().getNameBeginKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBeginScriptRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_0, "begin");
	    }

)
)
;





// Entry rule entryRuleEndScript
entryRuleEndScript returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEndScriptRule()); }
	 iv_ruleEndScript=ruleEndScript 
	 { $current=$iv_ruleEndScript.current; } 
	 EOF 
;

// Rule EndScript
ruleEndScript returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=	'end' 
    {
        newLeafNode(lv_name_0_0, grammarAccess.getEndScriptAccess().getNameEndKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEndScriptRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_0, "end");
	    }

)
)
;





// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	 iv_ruleStatement=ruleStatement 
	 { $current=$iv_ruleStatement.current; } 
	 EOF 
;

// Rule Statement
ruleStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getCommandParserRuleCall_0()); 
    }
    this_Command_0=ruleCommand
    { 
        $current = $this_Command_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getParallelParserRuleCall_1()); 
    }
    this_Parallel_1=ruleParallel
    { 
        $current = $this_Parallel_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleParallel
entryRuleParallel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParallelRule()); }
	 iv_ruleParallel=ruleParallel 
	 { $current=$iv_ruleParallel.current; } 
	 EOF 
;

// Rule Parallel
ruleParallel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getParallelAccess().getBeginParallelBeginParallelParserRuleCall_0_0()); 
	    }
		lv_BeginParallel_0_0=ruleBeginParallel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParallelRule());
	        }
       		set(
       			$current, 
       			"BeginParallel",
        		lv_BeginParallel_0_0, 
        		"BeginParallel");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getParallelAccess().getStatementListsStatementListParserRuleCall_1_0()); 
	    }
		lv_statementLists_1_0=ruleStatementList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParallelRule());
	        }
       		add(
       			$current, 
       			"statementLists",
        		lv_statementLists_1_0, 
        		"StatementList");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_PARALLEL_SEPARATOR_2=RULE_PARALLEL_SEPARATOR
    { 
    newLeafNode(this_PARALLEL_SEPARATOR_2, grammarAccess.getParallelAccess().getPARALLEL_SEPARATORTerminalRuleCall_2_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParallelAccess().getStatementListsStatementListParserRuleCall_2_1_0()); 
	    }
		lv_statementLists_3_0=ruleStatementList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParallelRule());
	        }
       		add(
       			$current, 
       			"statementLists",
        		lv_statementLists_3_0, 
        		"StatementList");
	        afterParserOrEnumRuleCall();
	    }

)
))+(
(
		{ 
	        newCompositeNode(grammarAccess.getParallelAccess().getEndParallelEndParallelParserRuleCall_3_0()); 
	    }
		lv_EndParallel_4_0=ruleEndParallel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParallelRule());
	        }
       		set(
       			$current, 
       			"EndParallel",
        		lv_EndParallel_4_0, 
        		"EndParallel");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleBeginParallel
entryRuleBeginParallel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBeginParallelRule()); }
	 iv_ruleBeginParallel=ruleBeginParallel 
	 { $current=$iv_ruleBeginParallel.current; } 
	 EOF 
;

// Rule BeginParallel
ruleBeginParallel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=	'[' 
    {
        newLeafNode(lv_name_0_0, grammarAccess.getBeginParallelAccess().getNameLeftSquareBracketKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBeginParallelRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_0, "[");
	    }

)
)
;





// Entry rule entryRuleEndParallel
entryRuleEndParallel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEndParallelRule()); }
	 iv_ruleEndParallel=ruleEndParallel 
	 { $current=$iv_ruleEndParallel.current; } 
	 EOF 
;

// Rule EndParallel
ruleEndParallel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=	']' 
    {
        newLeafNode(lv_name_0_0, grammarAccess.getEndParallelAccess().getNameRightSquareBracketKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEndParallelRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_0, "]");
	    }

)
)
;





// Entry rule entryRuleStatementList
entryRuleStatementList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementListRule()); }
	 iv_ruleStatementList=ruleStatementList 
	 { $current=$iv_ruleStatementList.current; } 
	 EOF 
;

// Rule StatementList
ruleStatementList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementListAccess().getStatementsStatementParserRuleCall_0()); 
	    }
		lv_statements_0_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementListRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_0_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)+
;





// Entry rule entryRuleCommand
entryRuleCommand returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCommandRule()); }
	 iv_ruleCommand=ruleCommand 
	 { $current=$iv_ruleCommand.current; } 
	 EOF 
;

// Rule Command
ruleCommand returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getScaleFunctionParserRuleCall_0_0()); 
    }
    this_ScaleFunction_0=ruleScaleFunction
    { 
        $current = $this_ScaleFunction_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getGenericFunctionParserRuleCall_0_1()); 
    }
    this_GenericFunction_1=ruleGenericFunction
    { 
        $current = $this_GenericFunction_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getWaitFunctionParserRuleCall_0_2()); 
    }
    this_WaitFunction_2=ruleWaitFunction
    { 
        $current = $this_WaitFunction_2.current; 
        afterParserOrEnumRuleCall();
    }
)this_LP_3=RULE_LP
    { 
    newLeafNode(this_LP_3, grammarAccess.getCommandAccess().getLPTerminalRuleCall_1()); 
    }
(this_RP_4=RULE_RP
    { 
    newLeafNode(this_RP_4, grammarAccess.getCommandAccess().getRPTerminalRuleCall_2_0()); 
    }

    |(((
(
		{ 
	        newCompositeNode(grammarAccess.getCommandAccess().getParamsParamParserRuleCall_2_1_0_0_0()); 
	    }
		lv_params_5_0=ruleParam		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCommandRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_5_0, 
        		"Param");
	        afterParserOrEnumRuleCall();
	    }

)
)this_COMMA_6=RULE_COMMA
    { 
    newLeafNode(this_COMMA_6, grammarAccess.getCommandAccess().getCOMMATerminalRuleCall_2_1_0_1()); 
    }
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getCommandAccess().getParamsParamParserRuleCall_2_1_1_0()); 
	    }
		lv_params_7_0=ruleParam		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCommandRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_7_0, 
        		"Param");
	        afterParserOrEnumRuleCall();
	    }

)
)this_RP_8=RULE_RP
    { 
    newLeafNode(this_RP_8, grammarAccess.getCommandAccess().getRPTerminalRuleCall_2_1_2()); 
    }
))this_SEQUENTIAL_SEPARATOR_9=RULE_SEQUENTIAL_SEPARATOR
    { 
    newLeafNode(this_SEQUENTIAL_SEPARATOR_9, grammarAccess.getCommandAccess().getSEQUENTIAL_SEPARATORTerminalRuleCall_3()); 
    }
)
;





// Entry rule entryRuleScaleFunction
entryRuleScaleFunction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getScaleFunctionRule()); }
	 iv_ruleScaleFunction=ruleScaleFunction 
	 { $current=$iv_ruleScaleFunction.current; } 
	 EOF 
;

// Rule ScaleFunction
ruleScaleFunction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getScaleFunctionAccess().getScaleInInfraParserRuleCall_0()); 
    }
    this_ScaleInInfra_0=ruleScaleInInfra
    { 
        $current = $this_ScaleInInfra_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getScaleFunctionAccess().getScaleOutInfraParserRuleCall_1()); 
    }
    this_ScaleOutInfra_1=ruleScaleOutInfra
    { 
        $current = $this_ScaleOutInfra_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getScaleFunctionAccess().getScaleUpInfraParserRuleCall_2()); 
    }
    this_ScaleUpInfra_2=ruleScaleUpInfra
    { 
        $current = $this_ScaleUpInfra_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getScaleFunctionAccess().getScaleDownInfraParserRuleCall_3()); 
    }
    this_ScaleDownInfra_3=ruleScaleDownInfra
    { 
        $current = $this_ScaleDownInfra_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getScaleFunctionAccess().getScaleInSoftParserRuleCall_4()); 
    }
    this_ScaleInSoft_4=ruleScaleInSoft
    { 
        $current = $this_ScaleInSoft_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getScaleFunctionAccess().getScaleOutSoftParserRuleCall_5()); 
    }
    this_ScaleOutSoft_5=ruleScaleOutSoft
    { 
        $current = $this_ScaleOutSoft_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getScaleFunctionAccess().getScaleUpSoftParserRuleCall_6()); 
    }
    this_ScaleUpSoft_6=ruleScaleUpSoft
    { 
        $current = $this_ScaleUpSoft_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getScaleFunctionAccess().getScaleDownSoftParserRuleCall_7()); 
    }
    this_ScaleDownSoft_7=ruleScaleDownSoft
    { 
        $current = $this_ScaleDownSoft_7.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleWaitFunction
entryRuleWaitFunction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWaitFunctionRule()); }
	 iv_ruleWaitFunction=ruleWaitFunction 
	 { $current=$iv_ruleWaitFunction.current; } 
	 EOF 
;

// Rule WaitFunction
ruleWaitFunction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=	'wait' 
    {
        newLeafNode(lv_name_0_0, grammarAccess.getWaitFunctionAccess().getNameWaitKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getWaitFunctionRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_0, "wait");
	    }

)
)
;





// Entry rule entryRuleGenericFunction
entryRuleGenericFunction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGenericFunctionRule()); }
	 iv_ruleGenericFunction=ruleGenericFunction 
	 { $current=$iv_ruleGenericFunction.current; } 
	 EOF 
;

// Rule GenericFunction
ruleGenericFunction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getGenericFunctionAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGenericFunctionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleScaleInInfra
entryRuleScaleInInfra returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getScaleInInfraRule()); }
	 iv_ruleScaleInInfra=ruleScaleInInfra 
	 { $current=$iv_ruleScaleInInfra.current; } 
	 EOF 
;

// Rule ScaleInInfra
ruleScaleInInfra returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=	'scaleInInfra' 
    {
        newLeafNode(lv_name_0_0, grammarAccess.getScaleInInfraAccess().getNameScaleInInfraKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getScaleInInfraRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_0, "scaleInInfra");
	    }

)
)
;





// Entry rule entryRuleScaleOutInfra
entryRuleScaleOutInfra returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getScaleOutInfraRule()); }
	 iv_ruleScaleOutInfra=ruleScaleOutInfra 
	 { $current=$iv_ruleScaleOutInfra.current; } 
	 EOF 
;

// Rule ScaleOutInfra
ruleScaleOutInfra returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=	'scaleOutInfra' 
    {
        newLeafNode(lv_name_0_0, grammarAccess.getScaleOutInfraAccess().getNameScaleOutInfraKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getScaleOutInfraRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_0, "scaleOutInfra");
	    }

)
)
;





// Entry rule entryRuleScaleUpInfra
entryRuleScaleUpInfra returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getScaleUpInfraRule()); }
	 iv_ruleScaleUpInfra=ruleScaleUpInfra 
	 { $current=$iv_ruleScaleUpInfra.current; } 
	 EOF 
;

// Rule ScaleUpInfra
ruleScaleUpInfra returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=	'scaleUpInfra' 
    {
        newLeafNode(lv_name_0_0, grammarAccess.getScaleUpInfraAccess().getNameScaleUpInfraKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getScaleUpInfraRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_0, "scaleUpInfra");
	    }

)
)
;





// Entry rule entryRuleScaleDownInfra
entryRuleScaleDownInfra returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getScaleDownInfraRule()); }
	 iv_ruleScaleDownInfra=ruleScaleDownInfra 
	 { $current=$iv_ruleScaleDownInfra.current; } 
	 EOF 
;

// Rule ScaleDownInfra
ruleScaleDownInfra returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=	'scaleDownInfra' 
    {
        newLeafNode(lv_name_0_0, grammarAccess.getScaleDownInfraAccess().getNameScaleDownInfraKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getScaleDownInfraRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_0, "scaleDownInfra");
	    }

)
)
;





// Entry rule entryRuleScaleInSoft
entryRuleScaleInSoft returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getScaleInSoftRule()); }
	 iv_ruleScaleInSoft=ruleScaleInSoft 
	 { $current=$iv_ruleScaleInSoft.current; } 
	 EOF 
;

// Rule ScaleInSoft
ruleScaleInSoft returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=	'scaleInSoft' 
    {
        newLeafNode(lv_name_0_0, grammarAccess.getScaleInSoftAccess().getNameScaleInSoftKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getScaleInSoftRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_0, "scaleInSoft");
	    }

)
)
;





// Entry rule entryRuleScaleOutSoft
entryRuleScaleOutSoft returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getScaleOutSoftRule()); }
	 iv_ruleScaleOutSoft=ruleScaleOutSoft 
	 { $current=$iv_ruleScaleOutSoft.current; } 
	 EOF 
;

// Rule ScaleOutSoft
ruleScaleOutSoft returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=	'scaleOutSoft' 
    {
        newLeafNode(lv_name_0_0, grammarAccess.getScaleOutSoftAccess().getNameScaleOutSoftKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getScaleOutSoftRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_0, "scaleOutSoft");
	    }

)
)
;





// Entry rule entryRuleScaleUpSoft
entryRuleScaleUpSoft returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getScaleUpSoftRule()); }
	 iv_ruleScaleUpSoft=ruleScaleUpSoft 
	 { $current=$iv_ruleScaleUpSoft.current; } 
	 EOF 
;

// Rule ScaleUpSoft
ruleScaleUpSoft returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=	'scaleUpSoft' 
    {
        newLeafNode(lv_name_0_0, grammarAccess.getScaleUpSoftAccess().getNameScaleUpSoftKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getScaleUpSoftRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_0, "scaleUpSoft");
	    }

)
)
;





// Entry rule entryRuleScaleDownSoft
entryRuleScaleDownSoft returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getScaleDownSoftRule()); }
	 iv_ruleScaleDownSoft=ruleScaleDownSoft 
	 { $current=$iv_ruleScaleDownSoft.current; } 
	 EOF 
;

// Rule ScaleDownSoft
ruleScaleDownSoft returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=	'scaleDownSoft' 
    {
        newLeafNode(lv_name_0_0, grammarAccess.getScaleDownSoftAccess().getNameScaleDownSoftKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getScaleDownSoftRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_0, "scaleDownSoft");
	    }

)
)
;





// Entry rule entryRuleParam
entryRuleParam returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParamRule()); }
	 iv_ruleParam=ruleParam 
	 { $current=$iv_ruleParam.current; } 
	 EOF 
;

// Rule Param
ruleParam returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_INT
		{
			newLeafNode(lv_value_0_0, grammarAccess.getParamAccess().getValueINTTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParamRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"INT");
	    }

)
)
;





RULE_PARALLEL_SEPARATOR : '||';

RULE_LP : '(';

RULE_RP : ')';

fragment RULE_LETTER : ('$'|'A'..'Z'|'a'..'z'|'_');

fragment RULE_NUMBER : '0'..'9';

RULE_SEQUENTIAL_SEPARATOR : ';';

RULE_COMMA : ',';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


