/*
 * generated by Xtext
 */
package org.elascript.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.elascript.services.ElascriptGrammarAccess;

public class ElascriptParser extends AbstractContentAssistParser {
	
	@Inject
	private ElascriptGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.elascript.ui.contentassist.antlr.internal.InternalElascriptParser createParser() {
		org.elascript.ui.contentassist.antlr.internal.InternalElascriptParser result = new org.elascript.ui.contentassist.antlr.internal.InternalElascriptParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
					put(grammarAccess.getParallelAccess().getGroup(), "rule__Parallel__Group__0");
					put(grammarAccess.getParallelBodyAccess().getGroup(), "rule__ParallelBody__Group__0");
					put(grammarAccess.getParallelBodyAccess().getGroup_1(), "rule__ParallelBody__Group_1__0");
					put(grammarAccess.getCommandAccess().getGroup(), "rule__Command__Group__0");
					put(grammarAccess.getCommandAccess().getGroup_3(), "rule__Command__Group_3__0");
					put(grammarAccess.getScriptAccess().getScriptStatementsAssignment(), "rule__Script__ScriptStatementsAssignment");
					put(grammarAccess.getParallelAccess().getNameAssignment_2(), "rule__Parallel__NameAssignment_2");
					put(grammarAccess.getParallelBodyAccess().getStatementsAssignment_0(), "rule__ParallelBody__StatementsAssignment_0");
					put(grammarAccess.getParallelBodyAccess().getStatementsAssignment_1_1(), "rule__ParallelBody__StatementsAssignment_1_1");
					put(grammarAccess.getStatementListAccess().getStatementsAssignment(), "rule__StatementList__StatementsAssignment");
					put(grammarAccess.getCommandAccess().getNameAssignment_0(), "rule__Command__NameAssignment_0");
					put(grammarAccess.getCommandAccess().getParamsAssignment_2(), "rule__Command__ParamsAssignment_2");
					put(grammarAccess.getCommandAccess().getParamsAssignment_3_1(), "rule__Command__ParamsAssignment_3_1");
					put(grammarAccess.getParamAccess().getValueAssignment(), "rule__Param__ValueAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.elascript.ui.contentassist.antlr.internal.InternalElascriptParser typedParser = (org.elascript.ui.contentassist.antlr.internal.InternalElascriptParser) parser;
			typedParser.entryRuleScript();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public ElascriptGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(ElascriptGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
